import { QuerySqlToken, sql } from "slonik";
import { ZodTypeAny } from "zod";

import type { SaasConfig } from "../types";

const createAccountsTableQuery = (
  config: SaasConfig,
): QuerySqlToken<ZodTypeAny> => {
  const accounts = config.tables?.accounts?.name as string;

  return sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${sql.identifier([accounts])} (
      id VARCHAR(36) DEFAULT gen_random_uuid() PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      registered_number VARCHAR(255),
      tax_id VARCHAR(255),
      individual BOOLEAN NOT NULL DEFAULT FALSE,
      slug VARCHAR(24),
      database VARCHAR(10),
      domain VARCHAR(255),
      UNIQUE (slug),
      UNIQUE (database),
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW()
    );
  `;
};

const createAccountAddressesTableQuery = (
  config: SaasConfig,
): QuerySqlToken<ZodTypeAny> => {
  const accountAddresses = config.tables?.accountAddresses?.name as string;
  const accounts = config.tables?.accounts?.name as string;

  return sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${sql.identifier([accountAddresses])} (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      account_id VARCHAR(36) NOT NULL,
      type_id SMALLINT NOT NULL,
      street VARCHAR(30) NOT NULL,
      street2 VARCHAR(30),
      city VARCHAR(30) NOT NULL,
      zip_code VARCHAR(30),
      state VARCHAR(30),
      country VARCHAR(2) NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
      CONSTRAINT fk_account
        FOREIGN KEY (account_id)
        REFERENCES ${sql.identifier([accounts])} (id)
        ON DELETE CASCADE
    );
  `;
};

const createAccountUsersTableQuery = (
  config: SaasConfig,
): QuerySqlToken<ZodTypeAny> => {
  const accountUsers = config.tables?.accountUsers?.name as string;

  return sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${sql.identifier([accountUsers])} (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      account_id VARCHAR(36) NOT NULL,
      user_id VARCHAR(255) NOT NULL,
      role_id VARCHAR(255) NOT NULL,
      disabled BOOLEAN NOT NULL DEFAULT false,
      date_start TIMESTAMP,
      date_end TIMESTAMP,
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
      UNIQUE (account_id, user_id)
    );
  `;
};

const createAccountInvitationsTableQuery = (
  config: SaasConfig,
): QuerySqlToken<ZodTypeAny> => {
  const accountInvitations = config.tables?.accountInvitations?.name as string;

  return sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${sql.identifier([accountInvitations])} (
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      account_id VARCHAR(36) NOT NULL,
      email VARCHAR ( 256 ) NOT NULL,
      invited_by_id VARCHAR ( 36 ) NOT NULL,
      payload JSONB,
      revoked_at TIMESTAMP,
      role VARCHAR ( 255 ) NOT NULL,
      token UUID DEFAULT gen_random_uuid() UNIQUE,
      user_id VARCHAR ( 36 ),
      accepted_at TIMESTAMP,
      expires_at TIMESTAMP,
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW()
    );
  `;
};

export {
  createAccountAddressesTableQuery,
  createAccountsTableQuery,
  createAccountUsersTableQuery,
  createAccountInvitationsTableQuery,
};
