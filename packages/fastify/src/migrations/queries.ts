import { QuerySqlToken, sql } from "slonik";
import { ZodTypeAny } from "zod";

const getTables = () => {
  const tables = {
    customers: "__customers",
    customer_users: "__customer_users",
    customer_addresses: "__customer_addresses",
  };

  return tables;
};

const createCustomersTableQuery = (): QuerySqlToken<ZodTypeAny> => {
  const { customers } = getTables();

  return sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${sql.identifier([customers])} (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      organization_name VARCHAR(255),
      registered_number VARCHAR(255),
      tax_id VARCHAR(255),
      individual BOOLEAN NOT NULL DEFAULT FALSE,
      slug VARCHAR(24) NOT NULL,
      domain VARCHAR(255),
      UNIQUE (slug),
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW()
    );
  `;
};

const createCustomerAddressesTableQuery = (): QuerySqlToken<ZodTypeAny> => {
  const { customer_addresses, customers } = getTables();

  return sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${sql.identifier([customer_addresses])} (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      type_id SMALLINT NOT NULL,
      street VARCHAR(30) NOT NULL,
      street2 VARCHAR(30),
      city VARCHAR(30) NOT NULL,
      zip_code VARCHAR(30),
      state VARCHAR(30),
      country VARCHAR(2) NOT NULL,
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
      CONSTRAINT fk_customer
        FOREIGN KEY (customer_id)
        REFERENCES ${sql.identifier([customers])} (id)
        ON DELETE CASCADE
    );
  `;
};

const createCustomerUsersTableQuery = (): QuerySqlToken<ZodTypeAny> => {
  const { customer_users, customers } = getTables();

  return sql.unsafe`
    CREATE TABLE IF NOT EXISTS ${sql.identifier([customer_users])} (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      customer_id INTEGER NOT NULL,
      user_id VARCHAR(255) NOT NULL,
      role_id VARCHAR(255) NOT NULL,
      date_start TIMESTAMP,
      date_end TIMESTAMP,
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
      UNIQUE (customer_id, user_id),
      CONSTRAINT fk_customer
        FOREIGN KEY (customer_id)
        REFERENCES ${sql.identifier([customers])} (id)
        ON DELETE CASCADE
    );
  `;
};

export {
  createCustomerAddressesTableQuery,
  createCustomersTableQuery,
  createCustomerUsersTableQuery,
};
